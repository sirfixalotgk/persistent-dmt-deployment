#/*********************************************************************
# Copyright (c) Intel Corporation 2020
# SPDX-License-Identifier: Apache-2.0
#**********************************************************************/
#version: '3.3'
services: 
  webui:
    image: intel/oact-webui:latest
    networks:
      - openamtnetwork
    build:
      context: ./sample-web-ui
      dockerfile: ./Dockerfile
    environment:
      RPS_SERVER: https://${MPS_COMMON_NAME}/rps
      MPS_SERVER: https://${MPS_COMMON_NAME}/mps
      VAULT_SERVER: https://${MPS_COMMON_NAME}/vault
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf 
    depends_on:
      db:
        condition: service_healthy
    restart: always 
  rps:
    image: intel/oact-rps:latest
    networks:
      - openamtnetwork
    build:
      context: ./rps
      dockerfile: ./Dockerfile
    env_file:
      - .env
    healthcheck:
      interval: 12s 
      timeout: 12s
      retries: 3 
      test: ["CMD", "node", "dist/Healthcheck.js"]
    environment: 
      RPS_MPS_SERVER: http://mps:3000
      RPS_SECRETS_PATH: ${SECRETS_PATH}
      RPS_VAULT_TOKEN: ${VAULT_TOKEN}
      RPS_VAULT_ADDRESS: ${VAULT_ADDRESS}
      RPS_CONNECTION_STRING: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/rpsdb?sslmode=disable
    depends_on:
      db:
        condition: service_healthy
    restart: always
  mps:
    image: intel/oact-mps:latest
    networks:
      - openamtnetwork
    build:
      context: ./mps
      dockerfile: ./Dockerfile
    ports:
      - "${MPSPORT}:4433"
    env_file:
      - .env
    healthcheck:
      interval: 12s 
      timeout: 12s
      retries: 3 
      test: ["CMD", "node", "dist/Healthcheck.js"]
    environment: 
      MPS_INSTANCE_NAME: '{{.Task.Name}}'
      MPS_SECRETS_PATH: ${SECRETS_PATH}
      MPS_VAULT_TOKEN: ${VAULT_TOKEN}
      MPS_VAULT_ADDRESS: ${VAULT_ADDRESS}
      MPS_CONNECTION_STRING: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/mpsdb?sslmode=disable
    volumes:
      - private-volume:/mps-microservice/private
    depends_on:
      db:
        condition: service_healthy
    restart: always
  mpsrouter:
    image: intel/oact-mpsrouter:latest
    environment:
      MPS_CONNECTION_STRING: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/mpsdb?sslmode=disable
      PORT: ${PORT}
      MPS_PORT: ${MPSWEBPORT}
    healthcheck:
      interval: 12s 
      timeout: 12s
      retries: 3 
      test: ["CMD", "/app","--health"]
    build:
      context: ./mps-router
      dockerfile: ./Dockerfile
    networks:
      - openamtnetwork
    depends_on:
      db:
        condition: service_healthy
    restart: always
  db:
    image: postgres:17
    build:
      context: ./pg
      dockerfile: ./Dockerfile
    # command: -c ssl=on -c ssl_cert_file=/var/lib/postgresql/server.crt -c ssl_key_file=/var/lib/postgresql/server.key
    networks:
      - openamtnetwork
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rpsdb"]
      interval: 2s
      timeout: 3s
      retries: 30
    environment:
      POSTGRES_DB: rpsdb
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - 5432:5432
    volumes: 
      - ./data:/docker-entrypoint-initdb.d
      - ./postgres-data:/var/lib/postgresql/data:rw
    # Un-comment the lines below to enable dependency.  Vault should start first
    # so that secret store is ready when the remaining microservices spawn
    # depends_on:
    #   vault:
    #     condition: service_healthy
    restart: always
  vault:
    image: hashicorp/vault
    networks:
      - openamtnetwork
    ports: 
      - "8200:8200"
    volumes:
      - ./vault-pd:/vault/data:rw
      - ./vault:/vault/config:rw
      - ./vault-scripts:/vault/data/bin:rw
    cap_add:
      - IPC_LOCK
    # Auto-unseal Vault
    # CAUTION: storing a key share creates risk of exposure.  Use at your own risk.
    #
    # Environment file edited to include VAULT_KEY variable.
    # The value is gathered during the Vault initialization process.
    #
    # Perform standard initialization process, capture token/key values
    # and populate .env with the correct values.
    environment: 
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_TOKEN}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_KEY: ${VAULT_KEY}
    # Original entrypoint disabled and replaced with parallel execution scripts.
    #
    # First script, uses the command declaration below, calls an unseal script with escape
    # so that the Vault launch is called immediately.  Vault is called with the same
    # parameters as seen in the original entrypoint but launches with exec so that it replaces
    # the process at PID 1 and is monitored correctly
    #
    # Vault default entrypoint:
    # entrypoint: vault server -config=/vault/config/vault.json
    #
    entrypoint: ["/bin/sh", "-c"]
    command: "/vault/data/bin/launch.sh"
    healthcheck:
      test: [ "CMD", "vault", "status", "-address=http://127.0.0.1:8200", "-format=json" ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 15s
    restart: always
# Un-comment to use consul (untested)
#  consul:
#    restart: always
#    image: hashicorp/consul
#    networks:
#      - openamtnetwork
#    ports:
#      - 8500:8500
#    profiles:
#      - consul
#    volumes:
#      - type: volume
#        source: consul-config
#        target: /consul/config
#        volume: {}
#      - type: volume
#        source: consul-data
#        target: /consul/data
#        volume: {}
#    command: "agent -server -ui -node=OACT-1 -bootstrap-expect=1 -client=0.0.0.0"
  kong:
    image: kong:3.1
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    command:
      - "kong"
      - "start"
      - "--vv"
    environment:
      - KONG_DATABASE=off
      - KONG_CASSANDRA_CONTACT_POINTS=kong-database
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_ADMIN_LISTEN_SSL=0.0.0.0:8444
      - KONG_NGINX_DAEMON=off
      - KONG_DECLARATIVE_CONFIG=/home/kong/kong.yml
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_DNS_ORDER=LAST,A,CNAME
      - KONG_UPSTREAM_KEEPALIVE_POOL_SIZE=0
      # WebUI certificate persistence config
      # - KONG_SSL_CERT=/ssl/oAMT_WebUI_Provisioning.crt
      # - KONG_SSL_CERT_KEY=/ssl/oAMT_WebUI_Provisioning.pem
    networks:
      - openamtnetwork
    volumes:
      - ./kong.yaml:/home/kong/kong.yml
      - ./kong-ssl:/ssl
    ports:
      - 443:8443
      - 8001:8001
    depends_on:
      db:
        condition: service_healthy
    restart: always
  # Mosquitto disabled (not needed)
  #
  # mosquitto:
  #   image: eclipse-mosquitto
  #   ports:
  #     - 8883:8883
  #   volumes: 
  #     - ./mosquitto.conf:/mosquitto/config/mosquitto.conf
  #   networks:
  #     - openamtnetwork
volumes:
    app-volume:
    private-volume:
networks: 
  openamtnetwork:
    driver: "bridge"
